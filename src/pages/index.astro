---
import TerminalHero from '../components/TerminalHero.astro';
import Navigation from '../components/Navigation.astro';
import Footer from '../components/Footer.astro';
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>William64.com</title>
    <meta name="description" content="A minimalist, terminal-inspired personal site of William Sutton, software engineer and retro-tech enthusiast." />
    
    <!-- Strategic Preloading -->
    <link rel="preload" href="/styles.css" as="style">
    <link rel="preload" href="/main.js" as="script">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="modulepreload" href="/_astro/TerminalHeroClient.L1wAk-Fv.js">
    
    <!-- Add Press Start 2P font for the retro banner -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    
    <link rel="stylesheet" href="/styles.css" />
  </head>
  <body class="bg-black text-green-400 font-mono">
    <div class="max-w-3xl mx-auto p-4">
      <div class="navbar">
        <header>
        <h1 class="text-4xl font-bold mb-2">William64.com</h1>
        <Navigation />
        <p class="text-sm text-green-600">Minimalist. Professional. Retro Hacker.</p>
      </header>
      
      <!-- Demo Scene Banner -->
      <div class="demo-scene-banner my-8">
        <canvas id="bannerCanvas"></canvas>
        <div class="banner-audio">
          <audio id="chiptune" loop>
            <source src="/assets/chiptune.mp3" type="audio/mp3">
          </audio>
          <button id="audioToggle">â™«</button>
        </div>
      </div>
      
      <main>
        <TerminalHero />
        
        <section class="mb-12">
          <h2 class="text-2xl border-b border-green-700 pb-2 mb-4">Latest Posts</h2>
          <ul id="post-list" class="space-y-6">
            <!-- Posts will be injected here by client-side JS -->
          </ul>
        </section>
        
        <section class="mb-12">
          <h2 class="text-2xl border-b border-green-700 pb-2 mb-4">Projects</h2>
          <div class="space-y-6">
            <div>
              <h3 class="text-xl font-bold">tpc-server</h3>
              <p class="text-green-300">
                A Python MCP server for managing thoughts, plans, and changelogs with a structured database.
                Provides tools for recording insights, planning approaches, and tracking changes.
              </p>
            </div>
          </div>
        </section>

        <section>
          <h2 class="text-2xl border-b border-green-700 pb-2 mb-4">About Me</h2>
          <p class="mb-4">
            I'm a software engineer with a passion for clean systems, deep logic,
            and building elegant solutions to gnarly problems. This is my digital
            workshopâ€”welcome.
          </p>
        </section>
      </main>
        <Footer />
      </div>
    </div>
    
    <script is:inline src="/main.js"></script>
    
    <!-- Demo Scene Banner Script -->
    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        const canvas = document.getElementById('bannerCanvas');
        const ctx = canvas.getContext('2d');
        const audio = document.getElementById('chiptune');
        const audioToggle = document.getElementById('audioToggle');
        
        // Set canvas dimensions
        canvas.width = canvas.offsetWidth;
        canvas.height = canvas.offsetHeight;
        
        // Audio toggle
        audioToggle.addEventListener('click', () => {
          if (audio.paused) {
            audio.play();
            audioToggle.textContent = 'ðŸ”Š';
          } else {
            audio.pause();
            audioToggle.textContent = 'â™«';
          }
        });
        
        // Scene state
        let state = {
          phase: 'loading', // loading, logo, main, greetz
          time: 0,
          stars: Array(100).fill().map(() => ({
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            speed: 0.5 + Math.random() * 2
          })),
          loadingProgress: 0,
          greetsList: [
            "FairLight", "mobman", "Vv_Xx_xX_vV", 
            "Vitalik Buterin", "Paul Frazee", 
            "Daniel Shiffman", "3dBuzz"
          ],
          greetzIndex: 0
        };
        
        // Animation loop
        function animate() {
          ctx.fillStyle = 'black';
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          
          // Draw starfield
          drawStars();
          
          // Draw scanlines
          drawScanlines();
          
          // Draw phase-specific content
          switch(state.phase) {
            case 'loading':
              drawLoading();
              break;
            case 'logo':
              drawLogo();
              break;
            case 'main':
              drawMain();
              break;
            case 'greetz':
              drawGreetz();
              break;
          }
          
          // Update state
          updateState();
          
          // Continue animation
          requestAnimationFrame(animate);
        }
        
        function drawStars() {
          ctx.fillStyle = 'white';
          state.stars.forEach(star => {
            ctx.fillRect(star.x, star.y, 1, 1);
            star.x -= star.speed;
            if (star.x < 0) {
              star.x = canvas.width;
              star.y = Math.random() * canvas.height;
            }
          });
        }
        
        function drawScanlines() {
          ctx.fillStyle = 'rgba(255,255,255,0.1)';
          for (let y = 0; y < canvas.height; y += 4) {
            ctx.fillRect(0, y, canvas.width, 1);
          }
        }
        
        function drawLoading() {
          const width = canvas.width * 0.8;
          const height = 20;
          const x = (canvas.width - width) / 2;
          const y = (canvas.height - height) / 2;
          
          // Border
          ctx.strokeStyle = '#00ff00';
          ctx.lineWidth = 2;
          ctx.strokeRect(x, y, width, height);
          
          // Fill
          ctx.fillStyle = '#00ff00';
          ctx.fillRect(x, y, width * state.loadingProgress, height);
          
          // Text
          ctx.fillStyle = 'white';
          ctx.font = '16px monospace';
          ctx.textAlign = 'center';
          ctx.fillText('LOADING...', canvas.width / 2, y + height + 30);
        }
        
        function drawLogo() {
          // William64 logo with pixel drawing effect
          ctx.fillStyle = '#ff00ff';
          ctx.font = 'bold 48px "Press Start 2P", monospace';
          ctx.textAlign = 'center';
          ctx.fillText('WILLIAM64', canvas.width / 2, canvas.height / 2);
          
          // Glitch effect occasionally
          if (Math.random() > 0.95) {
            ctx.fillStyle = '#00ffff';
            ctx.fillText('WILLIAM64', canvas.width / 2 + Math.random() * 4 - 2, canvas.height / 2);
          }
        }
        
        function drawMain() {
          // Main banner content
          drawLogo();
          
          // Scrolling text at bottom
          ctx.fillStyle = '#ffff00';
          ctx.font = '16px monospace';
          ctx.textAlign = 'center';
          
          const message = "WELCOME TO THE DIGITAL REALM OF WILLIAM64 - EST. 2025 - PUSHING PIXELS SINCE THE DAWN OF TIME";
          const scrollPos = (state.time * 2) % (message.length * 10 + canvas.width);
          
          ctx.fillText(message, canvas.width - scrollPos, canvas.height - 20);
        }
        
        function drawGreetz() {
          // GREETZ header
          ctx.fillStyle = '#00ffff';
          ctx.font = 'bold 32px "Press Start 2P", monospace';
          ctx.textAlign = 'center';
          ctx.fillText('GREETZ:', canvas.width / 2, canvas.height / 3);
          
          // Current greetz name with color cycling
          const hue = (state.time * 10) % 360;
          ctx.fillStyle = `hsl(${hue}, 100%, 50%)`;
          ctx.font = 'bold 24px "Press Start 2P", monospace';
          ctx.fillText(state.greetsList[state.greetzIndex], canvas.width / 2, canvas.height / 2);
        }
        
        function updateState() {
          state.time += 0.016; // Approx 60fps
          
          // Phase transitions
          switch(state.phase) {
            case 'loading':
              state.loadingProgress += 0.005;
              if (state.loadingProgress >= 1) {
                state.phase = 'logo';
                state.time = 0;
              }
              break;
            case 'logo':
              if (state.time > 3) {
                state.phase = 'main';
                state.time = 0;
              }
              break;
            case 'main':
              if (state.time > 10) {
                state.phase = 'greetz';
                state.time = 0;
              }
              break;
            case 'greetz':
              if (state.time > 1.5) {
                state.greetzIndex = (state.greetzIndex + 1) % state.greetsList.length;
                state.time = 0;
                
                // After showing all greetz, go back to main
                if (state.greetzIndex === 0) {
                  state.phase = 'main';
                }
              }
              break;
          }
        }
        
        // Handle window resize
        window.addEventListener('resize', () => {
          canvas.width = canvas.offsetWidth;
          canvas.height = canvas.offsetHeight;
        });
        
        // Start animation
        animate();
      });
    </script>
    
    <style>
      .demo-scene-banner {
        width: 100%;
        height: 250px;
        position: relative;
        overflow: hidden;
        background-color: black;
        border: 2px solid #ff00ff;
        border-radius: 4px;
      }
      
      #bannerCanvas {
        width: 100%;
        height: 100%;
      }
      
      .banner-audio {
        position: absolute;
        bottom: 10px;
        right: 10px;
        z-index: 10;
      }
      
      #audioToggle {
        background: rgba(0,0,0,0.5);
        color: #00ff00;
        border: 1px solid #00ff00;
        padding: 5px 10px;
        cursor: pointer;
        font-family: monospace;
      }
    </style>
  </body>
</html>
